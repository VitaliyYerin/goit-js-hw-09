{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,SAC9BC,EAAQF,SAASC,cAAc,gBAC/BE,EAAOH,SAASC,cAAc,eAC9BG,EAASJ,SAASC,cAAc,iBAOtC,SAASI,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GAUtC,OATgB,IAAIC,SAAQ,SAACC,EAASC,GACpCC,YAAW,WACLN,EACFI,EAAQ,CAACN,WAAUS,MAAAR,IAEnBM,EAAO,CAACP,WAAUS,MAAAR,MAEnBA,MAfPS,QAAQC,IAAIlB,GACZiB,QAAQC,IAAIf,GACZc,QAAQC,IAAId,GACZa,QAAQC,IAAIb,GAiBZL,EAAKmB,iBAAiB,UACtB,SAAoBC,GAClBA,EAAEC,iBAEYN,YAAW,WAEvB,IAAK,IAAIO,EAAW,EAAGA,EAAWjB,EAAOkB,MAAOD,GAAY,EAAG,CAE7DhB,EAAcgB,EADEE,OAAQrB,EAAMoB,OAAUC,OAAQpB,EAAKmB,OAAUD,GAE5DG,MAAK,SAAAC,G,IAAGnB,EAAQmB,EAARnB,SAAUoB,EAAKD,EAALV,MACjBlB,EAAA8B,OAAOC,QAAQ,uBAAwCC,OAAfvB,EAAS,QAAYuB,OAANH,EAAM,UAE9DI,OAAM,SAAAL,G,IAAGnB,EAAQmB,EAARnB,SAAUyB,EAAKN,EAALV,MAClBlB,EAAA8B,OAAOK,QAAQ,sBAAqCH,OAAfvB,EAAS,QAAYuB,OAANE,EAAM,aAI/D7B,EAAMoB,U","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst form = document.querySelector(\".form\")\nconst delay = document.querySelector(\"[name=delay]\")\nconst step = document.querySelector(\"[name=step]\")\nconst amount = document.querySelector(\"[name=amount]\")\nconsole.log(form);\nconsole.log(delay);\nconsole.log(step);\nconsole.log(amount);\n\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  const promise = new Promise((reselve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        reselve({position, delay})\n      } else {\n        reject({position, delay})\n      }\n    }, delay)\n  })\n  return promise\n}\n\nform.addEventListener(\"submit\", submitForm)\nfunction submitForm(e) {\n  e.preventDefault()\n\n  const timer = setTimeout(() => {\n\n    for (let position = 1; position < amount.value; position += 1) {\n      let totalStep = (Number(delay.value)) + (Number(step.value)) * position\n      createPromise(position, totalStep)\n        .then(({ position, delay }) => {\n          Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n    }\n\n  }, delay.value)\n\n\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$delay","$ce04d3a99e08e73b$var$step","$ce04d3a99e08e73b$var$amount","$ce04d3a99e08e73b$var$createPromise","position","delay1","shouldResolve","Math","random","Promise","reselve","reject","setTimeout","delay","console","log","addEventListener","e","preventDefault","position1","value","Number","then","param","delay2","Notify","success","concat","catch","delay3","failure"],"version":3,"file":"03-promises.acb1887c.js.map"}